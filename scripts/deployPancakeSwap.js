const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ PancakeSwap DEX...");
    
    const [deployer, user1, user2] = await ethers.getSigners();
    console.log("üë§ ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
    console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(await deployer.provider.getBalance(deployer.address)), "ETH");

    // 1. ÈÉ®ÁΩ≤ WBNB
    console.log("\nüì¶ 1. ÈÉ®ÁΩ≤ WBNB ÂêàÁ∫¶...");
    const WBNB = await ethers.getContractFactory("WBNB");
    const wbnb = await WBNB.deploy();
    await wbnb.waitForDeployment();
    console.log("‚úÖ WBNB ÈÉ®ÁΩ≤ÂÆåÊàê:", await wbnb.getAddress());

    // 2. ÈÉ®ÁΩ≤ PancakeFactory
    console.log("\nüì¶ 2. ÈÉ®ÁΩ≤ PancakeFactory ÂêàÁ∫¶...");
    const PancakeFactory = await ethers.getContractFactory("PancakeFactory");
    const factory = await PancakeFactory.deploy(deployer.address);
    await factory.waitForDeployment();
    console.log("‚úÖ PancakeFactory ÈÉ®ÁΩ≤ÂÆåÊàê:", await factory.getAddress());

    // 3. ÈÉ®ÁΩ≤ PancakeRouter
    console.log("\nüì¶ 3. ÈÉ®ÁΩ≤ PancakeRouter ÂêàÁ∫¶...");
    const PancakeRouter = await ethers.getContractFactory("PancakeRouter");
    const router = await PancakeRouter.deploy(await factory.getAddress(), await wbnb.getAddress());
    await router.waitForDeployment();
    console.log("‚úÖ PancakeRouter ÈÉ®ÁΩ≤ÂÆåÊàê:", await router.getAddress());

    // 4. ÂàõÂª∫ÊµãËØï‰ª£Â∏Å
    console.log("\nü™ô 4. ÂàõÂª∫ÊµãËØï‰ª£Â∏Å...");
    const TestToken = await ethers.getContractFactory("TestToken");
    
    const tokenA = await TestToken.deploy("Token A", "TKA", 1000000);
    await tokenA.waitForDeployment();
    console.log("‚úÖ Token A (TKA) ÈÉ®ÁΩ≤ÂÆåÊàê:", await tokenA.getAddress());
    
    const tokenB = await TestToken.deploy("Token B", "TKB", 1000000);
    await tokenB.waitForDeployment();
    console.log("‚úÖ Token B (TKB) ÈÉ®ÁΩ≤ÂÆåÊàê:", await tokenB.getAddress());

    // 5. Âêë WBNB Â≠òÂÖ•‰∏Ä‰∫õ ETH
    console.log("\nüí± 5. Âêë WBNB Â≠òÂÖ• ETH...");
    const depositAmount = ethers.parseEther("10");
    await wbnb.deposit({ value: depositAmount });
    console.log("‚úÖ Â≠òÂÖ•", ethers.formatEther(depositAmount), "ETH Âà∞ WBNB");

    // 6. ÊéàÊùÉ Router ‰ΩøÁî®‰ª£Â∏Å
    console.log("\nüîì 6. ÊéàÊùÉ Router ‰ΩøÁî®‰ª£Â∏Å...");
    const maxApproval = ethers.MaxUint256;
    
    await tokenA.approve(await router.getAddress(), maxApproval);
    await tokenB.approve(await router.getAddress(), maxApproval);
    await wbnb.approve(await router.getAddress(), maxApproval);
    console.log("‚úÖ ÊéàÊùÉÂÆåÊàê");

    // 7. ÂàõÂª∫‰∫§ÊòìÂØπÂπ∂Ê∑ªÂä†ÊµÅÂä®ÊÄß
    console.log("\nüèä 7. ÂàõÂª∫‰∫§ÊòìÂØπÂπ∂Ê∑ªÂä†ÊµÅÂä®ÊÄß...");
    
    // TKA/TKB ‰∫§ÊòìÂØπ
    const tokenAAmount = ethers.parseEther("1000");
    const tokenBAmount = ethers.parseEther("2000");
    
    console.log("  Ê∑ªÂä† TKA/TKB ÊµÅÂä®ÊÄß...");
    await router.addLiquidity(
        await tokenA.getAddress(),
        await tokenB.getAddress(),
        tokenAAmount,
        tokenBAmount,
        0,
        0,
        deployer.address,
        Math.floor(Date.now() / 1000) + 300
    );
    
    const pairAddress = await factory.getPair(await tokenA.getAddress(), await tokenB.getAddress());
    console.log("‚úÖ TKA/TKB ‰∫§ÊòìÂØπÂàõÂª∫:", pairAddress);

    // WBNB/TKA ‰∫§ÊòìÂØπ
    const wbnbAmount = ethers.parseEther("5");
    const tokenAForWBNB = ethers.parseEther("500");
    
    console.log("  Ê∑ªÂä† WBNB/TKA ÊµÅÂä®ÊÄß...");
    await router.addLiquidity(
        await wbnb.getAddress(),
        await tokenA.getAddress(),
        wbnbAmount,
        tokenAForWBNB,
        0,
        0,
        deployer.address,
        Math.floor(Date.now() / 1000) + 300
    );
    
    const wbnbTkaePairAddress = await factory.getPair(await wbnb.getAddress(), await tokenA.getAddress());
    console.log("‚úÖ WBNB/TKA ‰∫§ÊòìÂØπÂàõÂª∫:", wbnbTkaePairAddress);

    // 8. ÊµãËØï‰∫§Êòì
    console.log("\nüîÑ 8. ÊµãËØï‰ª£Â∏Å‰∫§Êç¢...");
    const swapAmount = ethers.parseEther("100");
    const path = [await tokenA.getAddress(), await tokenB.getAddress()];
    
    const amountsBefore = await router.getAmountsOut(swapAmount, path);
    console.log("  È¢ÑËÆ°‰∫§Êç¢:", ethers.formatEther(swapAmount), "TKA ->", ethers.formatEther(amountsBefore[1]), "TKB");
    
    await router.swapExactTokensForTokens(
        swapAmount,
        0,
        path,
        deployer.address,
        Math.floor(Date.now() / 1000) + 300
    );
    console.log("‚úÖ ‰∫§Êç¢ÂÆåÊàê");

    // 9. ÊòæÁ§∫ÊúÄÁªàÁä∂ÊÄÅ
    console.log("\nüìä 9. ÈÉ®ÁΩ≤ÊÄªÁªì:");
    console.log("=====================================");
    console.log("üîß ÂêàÁ∫¶Âú∞ÂùÄ:");
    console.log("   WBNB:", await wbnb.getAddress());
    console.log("   Factory:", await factory.getAddress());
    console.log("   Router:", await router.getAddress());
    console.log("   Token A (TKA):", await tokenA.getAddress());
    console.log("   Token B (TKB):", await tokenB.getAddress());
    console.log("");
    console.log("üèä ‰∫§ÊòìÂØπ:");
    console.log("   TKA/TKB Pair:", pairAddress);
    console.log("   WBNB/TKA Pair:", wbnbTkaePairAddress);
    console.log("");
    console.log("üí∞ ‰ª£Â∏Å‰ΩôÈ¢ù:");
    console.log("   TKA:", ethers.formatEther(await tokenA.balanceOf(deployer.address)));
    console.log("   TKB:", ethers.formatEther(await tokenB.balanceOf(deployer.address)));
    console.log("   WBNB:", ethers.formatEther(await wbnb.balanceOf(deployer.address)));
    console.log("");
    console.log("üéâ PancakeSwap DEX ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ");
    console.log("üìù ÂèØ‰ª•‰ΩøÁî® Router ËøõË°å‰ª£Â∏Å‰∫§Êç¢Êìç‰Ωú");
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØÂà∞Êñá‰ª∂
    const deploymentInfo = {
        network: "localhost",
        contracts: {
            WBNB: await wbnb.getAddress(),
            PancakeFactory: await factory.getAddress(),
            PancakeRouter: await router.getAddress(),
            TokenA: await tokenA.getAddress(),
            TokenB: await tokenB.getAddress()
        },
        pairs: {
            "TKA/TKB": pairAddress,
            "WBNB/TKA": wbnbTkaePairAddress
        },
        deployer: deployer.address
    };

    console.log("\nüíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞ÊéßÂà∂Âè∞ÔºåÂèØÁî®‰∫éÂâçÁ´ØÈõÜÊàê");
    return deploymentInfo;
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    });